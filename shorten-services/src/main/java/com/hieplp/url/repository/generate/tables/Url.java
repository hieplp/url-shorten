/*
 * This file is generated by jOOQ.
 */
package com.hieplp.url.repository.generate.tables;


import com.hieplp.url.repository.generate.Indexes;
import com.hieplp.url.repository.generate.Keys;
import com.hieplp.url.repository.generate.Shortenurl;
import com.hieplp.url.repository.generate.tables.records.UrlRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Url extends TableImpl<UrlRecord> {

    /**
     * The reference instance of <code>shortenUrl.url</code>
     */
    public static final Url URL = new Url();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>shortenUrl.url.urlId</code>.
     */
    public final TableField<UrlRecord, String> URLID = createField(DSL.name("urlId"), SQLDataType.VARCHAR(50).nullable(false), this, "");
    /**
     * The column <code>shortenUrl.url.shortUrl</code>.
     */
    public final TableField<UrlRecord, String> SHORTURL = createField(DSL.name("shortUrl"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>shortenUrl.url.longUrl</code>.
     */
    public final TableField<UrlRecord, String> LONGURL = createField(DSL.name("longUrl"), SQLDataType.CLOB.defaultValue(DSL.field("NULL", SQLDataType.CLOB)), this, "");
    /**
     * The column <code>shortenUrl.url.expiredAt</code>.
     */
    public final TableField<UrlRecord, LocalDateTime> EXPIREDAT = createField(DSL.name("expiredAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>shortenUrl.url.status</code>.
     */
    public final TableField<UrlRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.defaultValue(DSL.field("0", SQLDataType.TINYINT)), this, "");
    /**
     * The column <code>shortenUrl.url.createdBy</code>.
     */
    public final TableField<UrlRecord, String> CREATEDBY = createField(DSL.name("createdBy"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>shortenUrl.url.createdAt</code>.
     */
    public final TableField<UrlRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>shortenUrl.url.modifiedBy</code>.
     */
    public final TableField<UrlRecord, String> MODIFIEDBY = createField(DSL.name("modifiedBy"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>shortenUrl.url.modifiedAt</code>.
     */
    public final TableField<UrlRecord, LocalDateTime> MODIFIEDAT = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");
    /**
     * The column <code>shortenUrl.url.isDeleted</code>.
     */
    public final TableField<UrlRecord, Byte> ISDELETED = createField(DSL.name("isDeleted"), SQLDataType.TINYINT.defaultValue(DSL.field("0", SQLDataType.TINYINT)), this, "");
    /**
     * The column <code>shortenUrl.url.deletedBy</code>.
     */
    public final TableField<UrlRecord, String> DELETEDBY = createField(DSL.name("deletedBy"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");
    /**
     * The column <code>shortenUrl.url.deletedAt</code>.
     */
    public final TableField<UrlRecord, LocalDateTime> DELETEDAT = createField(DSL.name("deletedAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private Url(Name alias, Table<UrlRecord> aliased) {
        this(alias, aliased, null);
    }

    private Url(Name alias, Table<UrlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shortenUrl.url</code> table reference
     */
    public Url(String alias) {
        this(DSL.name(alias), URL);
    }

    /**
     * Create an aliased <code>shortenUrl.url</code> table reference
     */
    public Url(Name alias) {
        this(alias, URL);
    }

    /**
     * Create a <code>shortenUrl.url</code> table reference
     */
    public Url() {
        this(DSL.name("url"), null);
    }

    public <O extends Record> Url(Table<O> child, ForeignKey<O, UrlRecord> key) {
        super(child, key, URL);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UrlRecord> getRecordType() {
        return UrlRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Shortenurl.SHORTENURL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.URL_URL_SHORTURL_STATUS_INDEX);
    }

    @Override
    public UniqueKey<UrlRecord> getPrimaryKey() {
        return Keys.KEY_URL_PRIMARY;
    }

    @Override
    public List<UniqueKey<UrlRecord>> getKeys() {
        return Arrays.<UniqueKey<UrlRecord>>asList(Keys.KEY_URL_PRIMARY);
    }

    @Override
    public Url as(String alias) {
        return new Url(DSL.name(alias), this);
    }

    @Override
    public Url as(Name alias) {
        return new Url(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Url rename(String name) {
        return new Url(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Url rename(Name name) {
        return new Url(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, LocalDateTime, Byte, String, LocalDateTime, String, LocalDateTime, Byte, String, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
