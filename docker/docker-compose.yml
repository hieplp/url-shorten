version: '3.7'

services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - url-shorten
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      #      TZ: Asia/Ho_Chi_Minh
      TZ: Etc/UTC
    networks:
      - url-shorten
    restart: unless-stopped

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    #    command: >
    #      bash -c "sleep 30 && curl --user logstash_internal:${LOGSTASH_INTERNAL_PASSWORD:-} -XPUT 'http://localhost:9200/logstash-history'"
    networks:
      - url-shorten
    depends_on:
      - elasticsearch
      - mariadb
    restart: unless-stopped

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - url-shorten
    depends_on:
      - elasticsearch
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - url-shorten

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - url-shorten

  mariadb:
    container_name: mariadb
    image: mariadb:latest
    ports:
      - "3306:3306"
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: hieplp
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: hieplp
      TZ: Etc/UTC
    networks:
      - url-shorten

  auth-services:
    container_name: auth-services
    build:
      context: ../auth-services/
    volumes:
      - ./config/auth-services.json:/opt/verticles/config.json
      - ./config/rsa:/opt/verticles/rsa
    environment:
      CONFIG_FILE: config.json
      TZ: Etc/UTC
    #    ports:
    #      - "9901:9901"
    depends_on:
      - mariadb
      - zookeeper
    networks:
      - url-shorten

  user-services:
    container_name: user-services
    build:
      context: ../user-services/
    volumes:
      - ./config/user-services.json:/opt/verticles/config.json
    environment:
      CONFIG_FILE: config.json
      TZ: Etc/UTC
    depends_on:
      - mariadb
      - zookeeper
    networks:
      - url-shorten

  shorten-services:
    container_name: shorten-services
    build:
      context: ../shorten-services/
    volumes:
      - ./config/shorten-services.json:/opt/verticles/config.json
    environment:
      CONFIG_FILE: config.json
      TZ: Etc/UTC
    depends_on:
      - mariadb
      - kafka
      - zookeeper
    networks:
      - url-shorten

  statistic-services:
    container_name: statistic-services
    build:
      context: ../statistic-services/
    volumes:
      - ./config/statistic-services.json:/opt/verticles/config.json
    environment:
      CONFIG_FILE: config.json
      TZ: Etc/UTC
    depends_on:
      - elasticsearch
      - mariadb
      - kafka
      - zookeeper
    networks:
      - url-shorten

  gateway-services:
    container_name: gateway-services
    build:
      context: ../gateway-services/
    volumes:
      - ./config/gateway-services.json:/opt/verticles/config.json
      - ./config/rsa/token:/opt/verticles/rsa/token
    environment:
      CONFIG_FILE: config.json
      TZ: Etc/UTC
    ports:
      - "9900:9900"
    depends_on:
      - mariadb
      - zookeeper
      - auth-services
      - user-services
      - shorten-services
      - statistic-services
    networks:
      - url-shorten

networks:
  url-shorten:
    driver: bridge

volumes:
  elasticsearch:
